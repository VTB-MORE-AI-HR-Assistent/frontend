openapi: 3.0.3
info:
  title: VTB AI HR Platform API Gateway
  version: 1.0.0
  description: |
    Unified API Gateway for VTB AI HR Platform microservices.
    
    ## Available Services:
    
    ### User Service
    - **Authentication** (`/api/v1/auth/*`)
    - **User Management** (`/api/v1/users/*`)
    
    ### Job Service  
    - **Vacancy Management** (`/api/v1/vacancies/*`)
    - **Job Application Management** (`/api/v1/jobs/*`)
    
    ## Authentication
    
    Most endpoints require JWT Bearer token authentication.
    Obtain token via `/api/v1/auth/login` or `/api/v1/auth/register` endpoints.

servers:
  - url: http://localhost:8081
    description: API Gateway

tags:
  - name: Authentication
    description: User authentication and registration
  - name: Users
    description: User management operations

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT Bearer token authentication
  
  schemas:
    RegisterRequest:
      type: object
      required:
        - email
        - password
        - firstName
        - lastName
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 6
        firstName:
          type: string
        lastName:
          type: string
    
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
    
    RefreshRequest:
      type: object
      required:
        - refreshToken
      properties:
        refreshToken:
          type: string
    
    UpdateUserRequest:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
    
    ChangePasswordRequest:
      type: object
      required:
        - currentPassword
        - newPassword
      properties:
        currentPassword:
          type: string
        newPassword:
          type: string
          minLength: 6
    
    UserDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string
    
    AuthResponse:
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
        tokenType:
          type: string
        expiresIn:
          type: integer
          format: int64
        user:
          $ref: '#/components/schemas/UserDto'
    
    RefreshResponse:
      type: object
      properties:
        accessToken:
          type: string
        tokenType:
          type: string
        expiresIn:
          type: integer
          format: int64
    
    PageResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/UserDto'
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
        size:
          type: integer
        number:
          type: integer
        first:
          type: boolean
        last:
          type: boolean

paths:
  /api/v1/auth/register:
    post:
      tags:
        - Authentication
      summary: Register new user
      description: Create a new user account
      operationId: register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User successfully registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Invalid input
        '409':
          description: User already exists
  
  /api/v1/auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate user and receive JWT tokens
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid credentials
  
  /api/v1/auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh token
      description: Get new access token using refresh token
      operationId: refresh
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshRequest'
      responses:
        '200':
          description: Token refreshed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefreshResponse'
        '401':
          description: Invalid refresh token
  
  /api/v1/users:
    get:
      tags:
        - Users
      summary: Get all users
      description: Retrieve paginated list of all users
      operationId: getAllUsers
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number (0-based)
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: Page size
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: Users retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageResponse'
        '403':
          description: Not authorized
  
  /api/v1/users/me:
    get:
      tags:
        - Users
      summary: Get current user
      description: Retrieve authenticated user details
      operationId: getCurrentUser
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User details retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '403':
          description: Not authorized
  
  /api/v1/users/me/password:
    put:
      tags:
        - Users
      summary: Change password
      description: Change current user password
      operationId: changePassword
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
      responses:
        '204':
          description: Password changed
        '400':
          description: Invalid current password
        '403':
          description: Not authorized
  
  /api/v1/users/{id}:
    get:
      tags:
        - Users
      summary: Get user by ID
      description: Retrieve specific user details
      operationId: getUserById
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '403':
          description: Not authorized
        '404':
          description: User not found
    
    put:
      tags:
        - Users
      summary: Update user
      description: Update user information
      operationId: updateUser
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '403':
          description: Not authorized
        '404':
          description: User not found
    
    delete:
      tags:
        - Users
      summary: Delete user
      description: Delete user account
      operationId: deleteUser
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: User deleted
        '403':
          description: Not authorized
        '404':
          description: User not found
