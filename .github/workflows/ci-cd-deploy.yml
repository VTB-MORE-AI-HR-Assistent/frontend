name: CI/CD & Deploy

on:
  push:
    branches: [main, master, dev]
  pull_request:
    branches: [main, master, dev]
  workflow_dispatch: # Allow manual trigger

env:
  NODE_VERSION: "20"

jobs:
  # Job 1: Lint and Type Check
  lint:
    name: Lint & Type Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm install --no-audit --no-fund

      - name: Run ESLint
        run: npm run lint
        continue-on-error: true # Don't fail the build on lint errors

      - name: Type Check
        run: npx tsc --noEmit
        continue-on-error: true # TypeScript errors won't block (as per your config)

  # Job 2: Build and Deploy (runs in parallel with lint for speed)
  build-and-deploy:
    name: Build & Deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch' # Only deploy from main branch or manual trigger

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Cache Next.js build
        uses: actions/cache@v4
        with:
          path: |
            .next/cache
            ${{ github.workspace }}/.next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-

      - name: Install dependencies
        run: npm install --no-audit --no-fund

      - name: Build application
        run: npm run build
        env:
          NEXT_TELEMETRY_DISABLED: 1

      - name: Build Docker image
        run: |
          docker build -t vtb-hr-app:latest \
            --build-arg NEXT_PUBLIC_API_URL=http://5.129.236.219:8081/api \
            --build-arg NEXT_PUBLIC_APP_URL=http://5.129.236.219:3000 \
            --build-arg NODE_ENV=production \
            --no-cache .
          docker save vtb-hr-app:latest | gzip > vtb-hr-app.tar.gz

      - name: Upload Docker image
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: vtb-hr-app.tar.gz
          retention-days: 1

      - name: Deploy to Server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script: |
            # Create deployment directory if it doesn't exist
            mkdir -p ${{ secrets.SERVER_PATH }}
            cd ${{ secrets.SERVER_PATH }}

            # Stop existing container if running
            docker stop vtb-hr-app || true
            docker rm vtb-hr-app || true

      - name: Copy Docker image to server
        uses: appleboy/scp-action@v0.1.5
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          source: "vtb-hr-app.tar.gz"
          target: "${{ secrets.SERVER_PATH }}"

      - name: Load and run Docker container
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script: |
            cd ${{ secrets.SERVER_PATH }}

            # Load Docker image
            docker load < vtb-hr-app.tar.gz

            # The app-network should already exist from backend deployment
            # Just verify it exists
            if ! docker network ls | grep -q app-network; then
              echo "⚠️ Warning: app-network not found. Backend may not be deployed."
              echo "Creating network..."
              docker network create app-network
            fi

            # Run frontend container with Traefik labels
            # Environment variables are already embedded at build time
            docker run -d \
              --name vtb-hr-app \
              --restart unless-stopped \
              -p 3000:3000 \
              vtb-hr-app:latest

            # Health check
            sleep 10
            if docker ps | grep -q vtb-hr-app; then
              echo "✅ Frontend deployed successfully!"
              
              # Verify backend connectivity from frontend container
              echo "Testing backend connectivity..."
              docker exec vtb-hr-app curl -f http://api-gateway:8081/actuator/health && \
                echo "✅ Frontend can reach backend via Docker network" || \
                echo "❌ Frontend cannot reach backend. Check if backend is running and on same network"
              
              # Check what's running on the network
              echo ""
              echo "Containers on app-network:"
              docker network inspect app-network --format '{{range .Containers}}{{.Name}}{{println}}{{end}}'
              
              # Show frontend logs
              echo ""
              echo "Frontend logs:"
              docker logs vtb-hr-app --tail 30
            else
              echo "❌ Frontend deployment failed!"
              docker logs vtb-hr-app
              exit 1
            fi

            # Cleanup
            rm vtb-hr-app.tar.gz

  # Job 3: Docker Build Validation (for non-main branches)
  docker-validation:
    name: Docker Build Validation
    runs-on: ubuntu-latest
    if: github.ref != 'refs/heads/main' # Only run for non-main branches
    needs: lint

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false # Don't push to any registry
          load: true # Load the image into Docker daemon for testing
          tags: vtb-frontend:ci
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          # Run the container briefly to ensure it starts
          docker run -d --name test-container -p 3000:3000 vtb-frontend:ci

          # Wait for container to be healthy (max 30 seconds)
          for i in {1..30}; do
            if docker ps | grep -q test-container; then
              echo "Container is running"
              break
            fi
            echo "Waiting for container to start... ($i/30)"
            sleep 1
          done

          # Check if container is still running
          if docker ps | grep -q test-container; then
            echo "✅ Docker container started successfully"
            docker logs test-container
          else
            echo "❌ Container failed to start"
            docker logs test-container || true
            exit 1
          fi

          # Clean up
          docker stop test-container || true
          docker rm test-container || true

  # Job 4: Security Scan (Optional but recommended)
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    continue-on-error: true # Don't fail the pipeline on security issues

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm install --no-audit --no-fund

      - name: Run npm audit
        run: |
          npm audit --production --audit-level=high || true

  # Final Job: Success Notification
  success:
    name: Pipeline Success
    runs-on: ubuntu-latest
    needs: [lint, build-and-deploy, docker-validation, security]
    if: always()

    steps:
      - name: Success message
        run: |
          echo "## ✅ CI/CD & Deploy Pipeline Completed!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Results:**" >> $GITHUB_STEP_SUMMARY
          echo "- Linting: ${{ needs.lint.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Build & Deploy: ${{ needs.build-and-deploy.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Docker Validation: ${{ needs.docker-validation.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Security Scan: ${{ needs.security.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.build-and-deploy.result }}" == "success" ]; then
            echo "**🚀 Application deployed successfully!**" >> $GITHUB_STEP_SUMMARY
            echo "Access at: http://${{ secrets.SERVER_HOST }}:3000" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "**❌ Deployment failed!**" >> $GITHUB_STEP_SUMMARY
            echo "Check the logs for more details." >> $GITHUB_STEP_SUMMARY
          else
            echo "**✅ CI/CD completed successfully!**" >> $GITHUB_STEP_SUMMARY
            echo "Ready for merge to main for deployment." >> $GITHUB_STEP_SUMMARY
          fi
