name: CI/CD Pipeline (disabled)

on:
  workflow_dispatch:
    inputs:
      note:
        description: 'CI/CD is disabled by default. Run manually if needed.'
        required: false
        default: 'manual'

env:
  NODE_VERSION: '22'
  
jobs:
  # Job 1: Lint and Type Check
  lint:
    if: ${{ false }}
    name: Lint & Type Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm install --no-audit --no-fund
        
      - name: Run ESLint
        run: npm run lint
        continue-on-error: true
        
      - name: Type Check
        run: npx tsc --noEmit
        continue-on-error: true

  # Job 2: Build and Test
  build:
    if: ${{ false }}
    name: Build Next.js Application
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Cache Next.js build
        uses: actions/cache@v4
        with:
          path: |
            .next/cache
            ${{ github.workspace }}/.next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-
            
      - name: Install dependencies
        run: npm install --no-audit --no-fund
        
      - name: Build application
        run: npm run build
        env:
          NEXT_TELEMETRY_DISABLED: 1
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nextjs-build
          path: |
            .next/
            public/
          retention-days: 7
          
      - name: Build summary
        run: |
          echo "## Build Summary 📊" >> $GITHUB_STEP_SUMMARY
          echo "- Node Version: ${{ env.NODE_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- Build Status: ✅ Success" >> $GITHUB_STEP_SUMMARY
          echo "- Branch: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- Commit: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          
          if [ -d ".next" ]; then
            BUILD_SIZE=$(du -sh .next | cut -f1)
            echo "- Build Size: $BUILD_SIZE" >> $GITHUB_STEP_SUMMARY
          fi

  # Job 3: Docker Build Validation
  docker-build:
    if: ${{ false }}
    name: Docker Build Validation
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          load: true
          tags: vtb-frontend:ci
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Test Docker image
        run: |
          docker run -d --name test-container -p 3000:3000 vtb-frontend:ci
          for i in {1..30}; do
            if docker ps | grep -q test-container; then
              break
            fi
            sleep 1
          done
          docker ps | grep -q test-container
          docker stop test-container || true
          docker rm test-container || true
          
      - name: Docker build summary
        run: |
          echo "## Docker Build Summary 🐳" >> $GITHUB_STEP_SUMMARY
          IMAGE_SIZE=$(docker images vtb-frontend:ci --format "{{.Size}}")
          echo "- Image Size: $IMAGE_SIZE" >> $GITHUB_STEP_SUMMARY

  # Job 4: Security Scan
  security:
    if: ${{ false }}
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint
    continue-on-error: true
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run npm audit
        run: |
          npm audit --production --audit-level=high || true
          
      - name: Upload security results
        if: always()
        run: |
          echo "## Security Scan Results 🔒" >> $GITHUB_STEP_SUMMARY
          echo "npm audit completed. Check logs for details." >> $GITHUB_STEP_SUMMARY

  # Final Job: Success Notification
  success:
    if: ${{ false }}
    name: Pipeline Success
    runs-on: ubuntu-latest
    needs: [lint, build, docker-build]
    
    steps:
      - name: Success message
        run: |
          echo "## ✅ CI/CD Pipeline Completed Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "All checks passed." >> $GITHUB_STEP_SUMMARY