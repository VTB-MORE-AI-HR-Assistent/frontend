name: Deploy Frontend

on:
  workflow_run:
    workflows: ["CI/CD Pipeline"]
    branches: ["main", "master", "dev"]
    types: [completed]

concurrency:
  group: deploy-${{ github.event.workflow_run.head_branch || github.ref_name }}
  cancel-in-progress: true

jobs:
  deploy:
    name: Build and Deploy on Remote Server
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    env:
      SSH_HOST: ${{ secrets.SSH_HOST }}
      SSH_USER: ${{ secrets.SSH_USER }}
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
      SSH_PORT: ${{ secrets.SSH_PORT || '22' }}

    steps:
      - name: Checkout repository at passed commit
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_sha }}

      - name: Verify SSH secrets
        run: |
          echo "Verifying SSH secrets..."
          if [ -z "${SSH_HOST}" ] || [ -z "${SSH_USER}" ]; then
            echo "::error::SSH_HOST or SSH_USER not set"; exit 1; fi
          if [ -z "${SSH_PRIVATE_KEY}" ] && [ -z "${SSH_PASSWORD}" ]; then
            echo "::error::Provide SSH_PRIVATE_KEY or SSH_PASSWORD secret"; exit 1; fi

      - name: Upload project to server (SSH key)
        if: env.SSH_PRIVATE_KEY != ''
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ env.SSH_HOST }}
          username: ${{ env.SSH_USER }}
          key: ${{ env.SSH_PRIVATE_KEY }}
          port: ${{ env.SSH_PORT }}
          source: "."
          target: "~/vtb-frontend"
          overwrite: true

      - name: Upload project to server (password)
        if: env.SSH_PRIVATE_KEY == '' && env.SSH_PASSWORD != ''
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ env.SSH_HOST }}
          username: ${{ env.SSH_USER }}
          password: ${{ env.SSH_PASSWORD }}
          port: ${{ env.SSH_PORT }}
          source: "."
          target: "~/vtb-frontend"
          overwrite: true

      - name: Build and restart container on server (SSH key)
        if: env.SSH_PRIVATE_KEY != ''
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.SSH_HOST }}
          username: ${{ env.SSH_USER }}
          key: ${{ env.SSH_PRIVATE_KEY }}
          port: ${{ env.SSH_PORT }}
          script_stop: true
          script: |
            set -e
            cd ~/vtb-frontend

            echo "Building Docker image..."
            DOCKER_BUILDKIT=1 docker build -t vtb-frontend:latest .

            echo "Stopping previous container if exists..."
            if [ "$(docker ps -q -f name=^vtb-frontend$)" ]; then
              docker stop vtb-frontend || true
            fi
            if [ "$(docker ps -aq -f name=^vtb-frontend$)" ]; then
              docker rm vtb-frontend || true
            fi

            echo "Starting new container..."
            docker run -d \
              --name vtb-frontend \
              -p 3000:3000 \
              -e NODE_ENV=production \
              -e HOSTNAME=0.0.0.0 \
              --restart unless-stopped \
              vtb-frontend:latest

            echo "Deployment completed."

      - name: Build and restart container on server (password)
        if: env.SSH_PRIVATE_KEY == '' && env.SSH_PASSWORD != ''
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.SSH_HOST }}
          username: ${{ env.SSH_USER }}
          password: ${{ env.SSH_PASSWORD }}
          port: ${{ env.SSH_PORT }}
          script_stop: true
          script: |
            set -e
            cd ~/vtb-frontend

            echo "Building Docker image..."
            DOCKER_BUILDKIT=1 docker build -t vtb-frontend:latest .

            echo "Stopping previous container if exists..."
            if [ "$(docker ps -q -f name=^vtb-frontend$)" ]; then
              docker stop vtb-frontend || true
            fi
            if [ "$(docker ps -aq -f name=^vtb-frontend$)" ]; then
              docker rm vtb-frontend || true
            fi

            echo "Starting new container..."
            docker run -d \
              --name vtb-frontend \
              -p 3000:3000 \
              -e NODE_ENV=production \
              -e HOSTNAME=0.0.0.0 \
              --restart unless-stopped \
              vtb-frontend:latest

            echo "Deployment completed."