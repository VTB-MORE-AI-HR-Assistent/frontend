name: Deploy Frontend

on:
  push:
    branches: ["main", "master", "dev"]

concurrency:
  group: deploy-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  deploy:
    name: Build and Deploy on Remote Server
    runs-on: ubuntu-latest
    env:
      SERVER_HOST: ${{ secrets.SERVER_HOST }}
      SERVER_USER: ${{ secrets.SERVER_USER }}
      SERVER_SSH_KEY: ${{ secrets.SERVER_SSH_KEY }}
      SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
      SERVER_PORT: ${{ secrets.SERVER_PORT || '22' }}
      SERVER_PATH: ${{ secrets.SERVER_PATH || '~/vtb-frontend' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Verify SSH secrets
        run: |
          echo "Verifying SSH secrets..."
          if [ -z "${SERVER_HOST}" ] || [ -z "${SERVER_USER}" ]; then
            echo "::error::SERVER_HOST or SERVER_USER not set"; exit 1; fi
          if [ -z "${SERVER_SSH_KEY}" ] && [ -z "${SSH_PASSWORD}" ]; then
            echo "::error::Provide SERVER_SSH_KEY or SSH_PASSWORD secret"; exit 1; fi
          if [ -z "${SERVER_PATH}" ]; then
            echo "::error::SERVER_PATH not set"; exit 1; fi

      - name: Upload project to server (SSH key)
        if: env.SERVER_SSH_KEY != ''
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ env.SERVER_HOST }}
          username: ${{ env.SERVER_USER }}
          key: ${{ env.SERVER_SSH_KEY }}
          port: ${{ env.SERVER_PORT }}
          source: "."
          target: ${{ env.SERVER_PATH }}
          overwrite: true

      - name: Upload project to server (password)
        if: env.SERVER_SSH_KEY == '' && env.SSH_PASSWORD != ''
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ env.SERVER_HOST }}
          username: ${{ env.SERVER_USER }}
          password: ${{ env.SSH_PASSWORD }}
          port: ${{ env.SERVER_PORT }}
          source: "."
          target: ${{ env.SERVER_PATH }}
          overwrite: true

      - name: Build and restart container on server (SSH key)
        if: env.SERVER_SSH_KEY != ''
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.SERVER_HOST }}
          username: ${{ env.SERVER_USER }}
          key: ${{ env.SERVER_SSH_KEY }}
          port: ${{ env.SERVER_PORT }}
          script_stop: true
          script: |
            set -e
            cd ${{ env.SERVER_PATH }}

            echo "Building Docker image..."
            DOCKER_BUILDKIT=1 docker build -t vtb-frontend:latest .

            echo "Stopping previous container if exists..."
            if [ "$(docker ps -q -f name=^vtb-frontend$)" ]; then
              docker stop vtb-frontend || true
            fi
            if [ "$(docker ps -aq -f name=^vtb-frontend$)" ]; then
              docker rm vtb-frontend || true
            fi

            echo "Starting new container..."
            docker run -d \
              --name vtb-frontend \
              -p 3000:3000 \
              -e NODE_ENV=production \
              -e HOSTNAME=0.0.0.0 \
              --restart unless-stopped \
              vtb-frontend:latest

            echo "Deployment completed."

      - name: Build and restart container on server (password)
        if: env.SERVER_SSH_KEY == '' && env.SSH_PASSWORD != ''
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.SERVER_HOST }}
          username: ${{ env.SERVER_USER }}
          password: ${{ env.SSH_PASSWORD }}
          port: ${{ env.SERVER_PORT }}
          script_stop: true
          script: |
            set -e
            cd ${{ env.SERVER_PATH }}

            echo "Building Docker image..."
            DOCKER_BUILDKIT=1 docker build -t vtb-frontend:latest .

            echo "Stopping previous container if exists..."
            if [ "$(docker ps -q -f name=^vtb-frontend$)" ]; then
              docker stop vtb-frontend || true
            fi
            if [ "$(docker ps -aq -f name=^vtb-frontend$)" ]; then
              docker rm vtb-frontend || true
            fi

            echo "Starting new container..."
            docker run -d \
              --name vtb-frontend \
              -p 3000:3000 \
              -e NODE_ENV=production \
              -e HOSTNAME=0.0.0.0 \
              --restart unless-stopped \
              vtb-frontend:latest

            echo "Deployment completed."